数据库
数据库按照数据结构来组织、存储和管理的仓库。我们的程序都是在内存中运行的，一旦程序运行结束或者计算机断电，程序运行中的数据都会丢失。所以我们就需要将一些程序运行的数据持续化到硬盘中，以确保数据的安全性，而数据库就是数据持久化的最佳选择，说白了，也就是存储数据的仓库。

数据库分类
数据库主要分成两种：
1.关系型数据库(RDBMS)
·MySQL、Oracle、DB2、SQL Server ...
·关系型数据库中全都是表

2.非关系型数据库(No SQL Not Only SQL)
·MongoDB、Redis...
·键值对数据库
·文档数据库MongoDB

MongoDB简介
MongoDB是为快速开发互联网Web应用而设计的数据库系统。
MongoDB的设计目标是极简、灵活、作为Web应用栈的一部分。
MongoDB的数据模型是面向文档的，所谓文档是一种类似于JSON的数据结构，简单理解MongoDB这个数据库中存的是各种各样的JSON。(BSON,可存二进制+json)

三个概念
数据库(database):数据库是一个仓库，在仓库中可以存放集合
集合(collection):集合类似于数组，在集合中可以存放文档。
文档(document):文档数据库中的最小单位，我们存储和操作的内容都是文档。

下载mongodb
地址：https://www.mongodb.com/try/download/community
MongoDB Windows系统64位下载地址：http://www.mongodb.org/dl/win32/x86_64
MongoDB Windows系统32位下载地址：http://www.mongodb.org/dl/win32/i386
MongoDB 全部版本下载地址：http://www.mongodb.org/dl/win32
————————————————
版权声明：本文为CSDN博主「MuGuiLin」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/muguli2008/article/details/80591256
小版本偶数版本为稳定版，奇数版本为开发版。
Mongodb对于32位系统支持不佳，所以3.2版本以后没有再对32位系统的支持。


数据库(database)
-数据数据库的服务器
  -服务器用来保存数据
-数据库的客户端
  -客户端用来操作服务器，对数据进行增删改查的操作
要操作数据库要先启动服务器，再用客户端访问服务器进行操作。


安装使用mongoDB
·安装 mongodb-win32-x86_64-3.2.4-signed.msi

·配置环境变量 E:\mongodb\bin， win7 在path中添加路径， win10直接新建填入路径即可。

·测试 cmd 输入 mongod,显示如下代码即可：
2021-08-05T14:36:20.527+0800 I CONTROL  [initandlisten] MongoDB starting : pid=13476 port=27017 dbpath=C:\data\db\ 64-bit host=WIN-PAM8IPD79OL
2021-08-05T14:36:20.527+0800 I CONTROL  [initandlisten] targetMinOS: Windows Vista/Windows Server 2008
2021-08-05T14:36:20.528+0800 I CONTROL  [initandlisten] db version v3.2.4
2021-08-05T14:36:20.528+0800 I CONTROL  [initandlisten] git version: e2ee9ffcf9f5a94fad76802e28cc978718bb7a30
2021-08-05T14:36:20.528+0800 I CONTROL  [initandlisten] allocator: tcmalloc
2021-08-05T14:36:20.528+0800 I CONTROL  [initandlisten] modules: none
2021-08-05T14:36:20.529+0800 I CONTROL  [initandlisten] build environment:
2021-08-05T14:36:20.529+0800 I CONTROL  [initandlisten]     distarch: x86_64
2021-08-05T14:36:20.529+0800 I CONTROL  [initandlisten]     target_arch: x86_64
2021-08-05T14:36:20.529+0800 I CONTROL  [initandlisten] options: {}
2021-08-05T14:36:20.529+0800 I STORAGE  [initandlisten] exception in initAndListen: 29 Data directory C:\data\db\ not found., terminating
2021-08-05T14:36:20.529+0800 I CONTROL  [initandlisten] dbexit:  rc: 100

·在C盘根目录创建一个文件夹data,在data中创建db文件夹(5.0版本则是在mongoDB软件当前目录创建)
·打开cmd，输入 mongod, 启动mongoDB服务器(使用默认的数据库文件位置)
·32位系统注意：启动服务器时，需要输入如下内容：
    mongod --storageEngine=mmapv1
·如果是自定义文件夹的位置，可以使用自定义命令来指定启动mongo
mongod --dbpath E:\mongodb\data
·你也可以指定port来不用默认的27017端口,尽量使用4位以上的端口号，最大不要超过65535，避免使用系统使用的端口号以及其他人使用的端口号
mongod --dbpath 数据库地址 --port 端口号
mongod --dbpath E:\mongodb\data --port 10086

2021-08-05T14:42:04.970+0800 I CONTROL  [initandlisten] MongoDB starting : pid=8188 port=27017 dbpath=C:\data\db\ 64-bit host=WIN-PAM8IPD79OL
2021-08-05T14:42:04.970+0800 I CONTROL  [initandlisten] targetMinOS: Windows Vista/Windows Server 2008
2021-08-05T14:42:04.970+0800 I CONTROL  [initandlisten] db version v3.2.4
2021-08-05T14:42:04.970+0800 I CONTROL  [initandlisten] git version: e2ee9ffcf9f5a94fad76802e28cc978718bb7a30
2021-08-05T14:42:04.971+0800 I CONTROL  [initandlisten] allocator: tcmalloc
2021-08-05T14:42:04.971+0800 I CONTROL  [initandlisten] modules: none
2021-08-05T14:42:04.971+0800 I CONTROL  [initandlisten] build environment:
2021-08-05T14:42:04.971+0800 I CONTROL  [initandlisten]     distarch: x86_64
2021-08-05T14:42:04.971+0800 I CONTROL  [initandlisten]     target_arch: x86_64
2021-08-05T14:42:04.971+0800 I CONTROL  [initandlisten] options: {}
2021-08-05T14:42:04.972+0800 I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=8G,session_max=20000,eviction=(threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),checkpoint=(wait=60,log_size=2GB),statistics_log=(wait=0),
2021-08-05T14:42:05.019+0800 I NETWORK  [HostnameCanonicalizationWorker] Starting hostname canonicalization worker
2021-08-05T14:42:05.019+0800 I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory 'C:/data/db/diagnostic.data'
2021-08-05T14:42:05.027+0800 I NETWORK  [initandlisten] waiting for connections on port 27017	// 这个是关键

访问 http://localhost:27017/，显示It looks like you are trying to access MongoDB over HTTP on the native driver port. 这也是成功，mongoDB默认使用27017这个端口

·再打开一个cmd命令框，输入mongo ,显示如下即表示链接上了mongo数据库
C:\Users\Administrator>mongo
MongoDB shell version: 3.2.4
connecting to: test		//这个是关键	
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
        http://docs.mongodb.org/
Questions? Try the support group
        http://groups.google.com/group/mongodb-user
>

·如果mongo设置了其他端口，可以用mongo --port 端口号来访问
其他版本的安装使用资料：
MongoDB超详细保姆级入门教程！https://blog.csdn.net/lyyrhf/article/details/115469161
最新mongodb 5.0安装配置+添加到服务（看完这里配置不好你来联系我） https://blog.csdn.net/m0_46217225/article/details/119109334?spm=1001.2014.3001.5501
MongoDB（4.2.X版本）安装教程 https://blog.csdn.net/huantai3334/article/details/106945109

·将 mongoDB设置为系统服务
略，请参考上面文档

·基本概念
  数据库(database)
  集合(collection)
  文档(document)
    - 在 mongoDB中，数据库和集合都不需要手动创建，当我们创建文档时，如果文档所在的集合或数据库不存在会自动创建数据库和集合

·mongoDB图形化操作工具mongodbmanagerfree
下载地址：https://www.mongodbmanager.com/download-mongodb-manager-free,兼容32位和64位数据库。
F5 执行全部代码
F6 执行当前行代码
F9 执行当前选中代码

·基本指令
  show dbs
  show databases
    - 显示当前的所有数据库
  use 数据库名
    - 进入到指定的数据库中
  db
    - db表示当前所处的数据库
  show collections
    - 显示数据库中的所有集合

·数据库的CRUD(增删改查)的操作         
可以参考的文档：
https://docs.mongoing.com/
https://github.com/Vacricticy/mongodb_practice
  - 插入数据  
    当我们向集合中插入文档时，如果没有给文档指定_id属性，则数据库会自动为文档添加_id,该属性用来作为文档的唯一标识
    如果自己指定_id，那么必须保证_id的唯一性
      - 进入到指定的test数据库中
        use test

      - 插入一条数据(没有对应的集合就回自动创建)
        db.集合名.insertOne(数据)               向当前数据的集合插入一条数据
        db.jojo.insertOne({'name':'jojo'})     向当前数据库的jojo集合插入一条数据{'name':'jojo'}

      - 插入多条数据，需要用数组包裹
        db.集合名.insertMany([文档1，文档2]) 
        db.jojo.insertMany([{'name':'dio'},{'name':'月下三兄贵'}])  

      - 万能api:db.jojo.insert(),可以插入单条或者多条数据
        db.jojo.insert({'name':'二乔'})
        db.jojo.insert([{'name':'三乔'}, {'name':'四乔'}])

      - 插入优化
      # 添加两万条数据
      for(let i = 0; i < 20000; i++){
        # 需要执行20000次数据库的添加操作
        db.jojo.insert({username:'number'+i})
      }

      # 优化
      let arr = [];
      for(let i = 0; i < 20000; i++){
        arr.push(username:'number'+i)
      }
      db.user.insert(arr)

  - 查询数据
    - 查询对应数据
      db.集合名.find() 或 db.集合名.find({})
      db.jojo.find()

    - 统计文档个数
      db.集合名.count()或db.集合名.length() 
      db.jojo.count()     // 成功
      db.jojo.length()    // 在当前3.2.4的版本中报错

    - 条件查询，返回符合条件数据数组
      db.集合名.find(筛选条件)
      db.jojo.find({name:'dio'})
      # 如果匹配条件不为深度1的数据，一定要加引号表示数据
      db.check.find({'info.age':'18'})

    - 条件查询，返回第一个符合条件数据
      db.集合名.findOne(筛选条件)
      db.jojo.findOne({name:'dio'})

    - 使用查询运算符  
      $gt 大于
      $gte 大于等于
      $lt 小于
      $lte 小于等于
      $ne 不等于
      $eq 等于的另一种写法

      db.check.find({'info.age':{$gt:16}})    #info.age 大于 16 
      db.check.find({age:{$gt:19, $lt:49}})   #age 大于19 小于 49

      $or 或者
      # age 大于59 或 小于 29
      db.check.find({
          $or:[
              {age:{$gt:59}},
              {age:{$lt:29}}
          ]
      })

      # 分页查询
      db.check.find().skip(页码-1 * 每页显示的条数).limit(每页显示的条数)
      # 前5条数据
      db.check.find().limit(5)
      # 跳过前4条数据，读取后面3条数据
      db.check.find().skip(4).limit(3)

      # 排序
      # age属性排序，1为升序，-1为降序
      db.check.find().sort({age:1})
      db.check.find().sort({age:-1})

      # 遇到相同的属性，可以声明第二个属性进行排序，如果还是相同，就回按照插入的先后进行排序
      db.person.find().sort({age:1,right:-1})

      # 设置查询的投影，过滤出自己想要的字段
      db.person.find({},{age:18})     # 只输出id和age

  - 修改数据
    - 替换一个文档(update里面有api可以决定是否全部替换)
      使用_id来匹配要使用ObjectId来表示：_id:ObjectId('610c91d932db48e135074566')
      db.集合名.update(查询条件，新对象)
      db.jojo.update({'name':'dio'},{'name':'laosha','weapon':'chanzhang',male:'nan'})  

    - 修改对应的属性，需要用到修改操作父，比如$set,$unsettle,$push,$addToSet
      db.jojo.updata(
        # 查需条件
        {name:'laoshao'},
        {
          # 修改对应的属性
          $set:{
            weapon:'gunzi'
          }
          # 删除对应的属性
          $unset:{
            male:'nan'  // 这里的属性值可以随意，属性名对了就行
          }
        }
      )

    - update默认与updateOne等效，对于匹配到的文档只修改其中第一个
      updataMany()可以用来更改匹配到的所有文档
        db.jojo.updateMany(
          {name:'tester'},
          {
              $set:{
                  add:'add1'
              }
          }
        )

        # 当然数据结构不单单是一层
        db.jojo.updateMany(
            {name:'tester'},
            {
                $set:{
                    obj:{
                      address:'none',
                      job:'tester'
                    }
                }
            }
        )

    - 修改第一个符合的文档
      db.jojo.updateOne(
          {name:'tester'},
          {
              $set:{
                  content:'changed'
              }
          }
      )

    - 修改全部符合的内容
    db.person.updateMany(
        {right:2},
        {
            $set:{
                right:3,
                gender:'man'
            }
        }
    ) 

    - $push向目标对象的数据属性中添加数据
    db.person.updateMany(
        {right:3},
        {
            $push:{
                word:'done'
            }
        }
    )

    - $addToSet目标对象的数据属性中已存在对应内容就不会添加
    db.person.updateMany(
        {right:3},
        {
            $addToSet:{
                word:'done22'
            }
        }
    )

    - 自增自减操作符$inc
      {$inc:{num:100}} #让num自增100
      {$inc:{num:-100}} #让num自减100
      db.person.updateMany({right:{$lt:10}},{$inc:{age:10}})  #right小于10的，age加10

    - 替换一个文档
      db.jojo.replaceOne(
        # 查需条件
        {name:'jojo'},
        # 新的属性内容
        {
          word:'word',
          name:'muda'
        }
      )


  - 删除文档
    - 删除符合条件的文档
      db.集合名.remove(条件)
      # remove默认会删除所有匹配的文档。相当于deleteMany()
      # remove可以加第二个参数，表示只删除匹配到的第一个文档。此时相当于deleteOne()
      # 删除所有数据：db.students.remove({})----性格较差，内部是在一条一条的删除文档。
      # 可直接通过db.students.drop()删除整个集合来提高效率。
      db.jojo.remove({name:'tester'}) 
      db.jojo.remove({name:'tester', true}) #本地测试报错

      # 当删除的条件为内嵌的属性时,键名一定要用引号引起来：db.users.remove({"hobby.movies":'movie3'})

    - 删除单条数据
      db.集合名.deleteOne(条件)
      db.jojo.deleteOne({name:'tester'})

    - 删除多条数据
    db.集合名.deleteMany(条件)
      db.jojo.deleteMany({name:'tester'})

    - 删除集合
      db.jojo.drop()

    - 删除数据库
      db.dropDatabase()

文档之间的关系
  一对一(one to one)
  一对多(one to many)/多对一(many to ont`)
  多对多(many to many)

  一对一
  #用户与订单：
  db.users.insert([
  {_id:100,username:'liu1'},
  {_id:101,username:'liu2'}
  ])
  db.orders.insert([
  {list:['apple','banana'],user_id:100},
  {list:['apple','banana2'],user_id:100},
  {list:['apple'],user_id:101}
  ])

  查询liu1的所有订单：
  首先获取liu1的id: var user_id=db.users.findOne({name:'liu1'})._id;
  根据id从订单集合中查询对应的订单： db.orders.find({user_id:user_id})

  多对多
  #老师与学生
  db.teachers.insert([
      {
          _id:100,
          name:'liu1'
      },
      {
          _id:101,
          name:'liu2'
      },
      {
        _id:102,
        name:'liu3'
      }
  ])

  db.students.insert([
    {
      _id:1000,
      name:'xiao',
      tech_ids:[100,101]
    },
    {
      _id:1001,
      name:'xiao2',
      tech_ids:[102]
    }
  ])


mongoose
  简介：
    1.mongoose是nodejs中的专门用于操作mongodb数据库的js库
    2.mongoose中的对象：
    Schema 模式对象（用于约束文档的结构）
    Model 模型对象（即mongodb中的集合）
    Document 文档对象（即mongodb中的文档）  

  安装：
    npm i -s mongoose
